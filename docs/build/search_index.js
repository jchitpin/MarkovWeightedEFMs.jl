var documenterSearchIndex = {"docs":
[{"location":"functions/cycle-history-markov-chain/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/cycle-history-markov-chain/#Standard-CHMC-functions","page":"Functions","title":"Standard CHMC functions","text":"","category":"section"},{"location":"functions/cycle-history-markov-chain/","page":"Functions","title":"Functions","text":"reshape_efm_matrix\nreshape_efm_vector\nsteady_state_efm_distribution\nstoich_to_transition\ntree_plot","category":"page"},{"location":"functions/cycle-history-markov-chain/#MarkovWeightedEFMs.reshape_efm_matrix","page":"Functions","title":"MarkovWeightedEFMs.reshape_efm_matrix","text":"reshape_efm_matrix(#\n    ϕ::Matrix{Int64},\n    S::Matrix{<:Real}\n)\n\nConvert a matrix of EFMs ϕ to a nested vector of EFMs from a stoichiometry matrix S. Stoichiometry matrix may only contain unimolecular reactions.\n\nϕ is the n by k EFM matrix with n reactions (rows) and k EFMs (cols).\n\nS is the m by n stoichiometry matrix with m metabolites (rows) and n reactions (cols).\n\nExamples\n\njulia> ϕ = [#\n  1  1  0  0  0  0\n  1  0  1  0  0  0\n  0  0  1  0  0  1\n  0  1  0  0  0  1\n  1  0  0  1  0  0\n  0  0  0  1  0  1\n  0  1  0  0  0  1\n  1  1  0  0  0  0\n  0  0  0  0  1  0\n  0  0  0  0  1  0\n  1  1  0  0  0  0\n]\njulia> S = [#\n  -1  0  0  0  0  0  0  0  0  0  1\n   1 -1  1 -1  0  0  0  0  0  0  0\n   0  1 -1  0 -1  1  0  0  0  0  0\n   0  0  0  1  0  0 -1  0  0  0  0\n   0  0  0  0  1 -1  1 -1 -1  1  0\n   0  0  0  0  0  0  0  1  0  0 -1\n   0  0  0  0  0  0  0  0  1 -1  0\n]\njulia> efm_vector = reshape_efm_matrix(ϕ, S)\n6-element Vector{Vector{Int64}}:\n [1, 2, 3, 5, 6, 1]\n [1, 2, 4, 5, 6, 1]\n [2, 3, 2]\n [3, 5, 3]\n [5, 7, 5]\n [3, 2, 4, 5, 3]\n\n\n\n\n\n","category":"function"},{"location":"functions/cycle-history-markov-chain/#MarkovWeightedEFMs.reshape_efm_vector","page":"Functions","title":"MarkovWeightedEFMs.reshape_efm_vector","text":"reshape_efm_vector(#\n    ϕ::Vector{Vector{Int64}},\n    S::Matrix{<:Real}\n)\n\nConvert nested vector of EFM indices ϕ with length k to an n by k matrix of EFMs based on m by n stoichiometry matrix S. Stoichiometry matrix may only contain unimolecular reactions.\n\nϕ is the nested vector of EFMs with length k and elements corresponding to EFM metabolite indices in S.\n\nS is the m by n stoichiometry matrix with m metabolites (rows) and n reactions (cols).\n\nExamples\n\njulia> ϕ = [#\n  [1, 2, 3, 5, 6, 1],\n  [1, 2, 4, 5, 6, 1],\n  [2, 3, 2], [3, 5, 3], [5, 7, 5], [2, 4, 5, 3, 2]\n]\njulia> S = [#\n  -1  0  0  0  0  0  0  0  0  0  1\n   1 -1  1 -1  0  0  0  0  0  0  0\n   0  1 -1  0 -1  1  0  0  0  0  0\n   0  0  0  1  0  0 -1  0  0  0  0\n   0  0  0  0  1 -1  1 -1 -1  1  0\n   0  0  0  0  0  0  0  1  0  0 -1\n   0  0  0  0  0  0  0  0  1 -1  0\n]\njulia> efm_matrix = reshape_efm_vector(ϕ, S)\n11x6 Matrix{Int64}:\n 1  1  0  0  0  0\n 1  0  1  0  0  0\n 0  0  1  0  0  1\n 0  1  0  0  0  1\n 1  0  0  1  0  0\n 0  0  0  1  0  1\n 0  1  0  0  0  1\n 1  1  0  0  0  0\n 0  0  0  0  1  0\n 0  0  0  0  1  0\n 1  1  0  0  0  0\n\n\n\n\n\n","category":"function"},{"location":"functions/cycle-history-markov-chain/#MarkovWeightedEFMs.steady_state_efm_distribution","page":"Functions","title":"MarkovWeightedEFMs.steady_state_efm_distribution","text":"steady_state_efm_distribution(#\n    S::Matrix{<:Integer},\n    v::Vector{<:Real},\n    I::Int64=1\n)\n\nEnumerates the EFMs from stoichiometry matrix S and compute the steady state probabilities of each EFM according to the discrete-time, cycle-history Markov chain.\n\nS is a fully-connected, unimolecular, m by n stoichiometry matrix with m metabolites and n reactions.\n\nv is the n-length steady state flux vector associated with S.\n\nI is the initial starting state for rooting the cycle-history Markov chain. The choice of initial starting state does not affect the steady state EFM probabilities. The default is 1 and must be a whole number between 1:m.\n\nExample\n\njulia> S = [#\n -1  0  0  0  0  0  0  0  0  0  1\n  1 -1  1 -1  0  0  0  0  0  0  0\n  0  1 -1  0 -1  1  0  0  0  0  0\n  0  0  0  1  0  0 -1  0  0  0  0\n  0  0  0  0  1 -1  1 -1  1 -1  0\n  0  0  0  0  0  0  0  0  0  1 -1\n  0  0  0  0  0  0  0  1 -1  0  0\n];\njulia> v = [3, 2, 1, 2, 3, 2, 2, 1, 1, 3, 3];\njulia> res = steady_state_efm_distribution(S, v);\njulia> res.e # EFM state sequences\n6-element Vector{Vector{Int64}}:\n [3, 2, 3]\n [3, 2, 4, 5, 3]\n [3, 5, 3]\n [6, 1, 2, 4, 5, 6]\n [7, 5, 7]\n [6, 1, 2, 3, 5, 6]\n\njulia> res.p # EFM probabilities\n6-element Vector{Float64}:\n 0.10638297872340426\n 0.0425531914893617\n 0.25531914893617025\n 0.1914893617021277\n 0.14893617021276595\n 0.25531914893617025\n\njulia> res.w # EFM weights\n6-element Vector{Float64}:\n 0.7142857142857142\n 0.2857142857142857\n 1.7142857142857144\n 1.2857142857142858\n 0.9999999999999999\n 1.7142857142857144\n\n\n\n\n\nsteady_state_efm_distribution(#\n    T::Matrix{<:Real},\n    I::Int64=1\n)\n\nEnumerates the EFMs from a (right) transition probability matrix whose rows sum to one, and compute the steady state probabilities of each EFM according to the discrete-time, cycle-history Markov chain.\n\nT is a fully-connected, unimolecular, m by n stoichiometry matrix with m metabolites and n reactions.\n\nI is the initial starting state for rooting the cycle-history Markov chain. The choice of initial starting state does not affect the steady state EFM probabilities. The default is 1 and must be a whole number between 1:m.\n\nExample\n\njulia> T = [#\n  0.0  1.0   0.0       0.0  0.0   0.0  0.0\n  0.0  0.0   0.5       0.5  0.0   0.0  0.0\n  0.0  0.25  0.0       0.0  0.75  0.0  0.0\n  0.0  0.0   0.0       0.0  1.0   0.0  0.0\n  0.0  0.0   0.333333  0.0  0.0   0.5  0.166667\n  1.0  0.0   0.0       0.0  0.0   0.0  0.0\n  0.0  0.0   0.0       0.0  1.0   0.0  0.0\n];\njulia> res = steady_state_efm_distribution(T);\njulia> res.e # EFM state sequences\n6-element Vector{Vector{Int64}}:\n [3, 2, 3]\n [3, 2, 4, 5, 3]\n [3, 5, 3]\n [6, 1, 2, 3, 5, 6]\n [7, 5, 7]\n [6, 1, 2, 4, 5, 6]\n\njulia> res.p # EFM probabilities\n6-element Vector{Float64}:\n 0.13723110896294213\n 0.035797649943428565\n 0.26989203316869914\n 0.20302350628312624\n 0.13926980198123254\n 0.2147858996605714\n\n\n\n\n\n","category":"function"},{"location":"functions/cycle-history-markov-chain/#MarkovWeightedEFMs.stoich_to_transition","page":"Functions","title":"MarkovWeightedEFMs.stoich_to_transition","text":"stoich_to_transition(S::Matrix{<:Real}, v::Vector{<:Real})\n\nConvert a stoichiometry matrix with vector of steady state fluxes to a right stochastic transition probability matrix with rows summing to one.\n\nS is the m by n stoichiometry matrix with m metabolites and n reactions.\n\nv is the steady state flux vector with length n.\n\nExamples\n\njulia> S = [#\n  -1  0  0  0  0  0  0  0  0  0  1\n   1 -1  1 -1  0  0  0  0  0  0  0\n   0  1 -1  0 -1  1  0  0  0  0  0\n   0  0  0  1  0  0 -1  0  0  0  0\n   0  0  0  0  1 -1  1 -1 -1  1  0\n   0  0  0  0  0  0  0  1  0  0 -1\n   0  0  0  0  0  0  0  0  1 -1  0\n]\njulia> v = [2, 2, 2, 2, 2, 2, 2, 2, 4]\njulia> stoich_to_transition(S, v)\n7x7 Matrix{Float64}:\n 0.0  1.0   0.0       0.0  0.0   0.0  0.0\n 0.0  0.0   0.5       0.5  0.0   0.0  0.0\n 0.0  0.25  0.0       0.0  0.75  0.0  0.0\n 0.0  0.0   0.0       0.0  1.0   0.0  0.0\n 0.0  0.0   0.333333  0.0  0.0   0.5 0.166667\n 1.0  0.0   0.0       0.0  0.0   0.0  0.0\n 0.0  0.0   0.0       0.0  1.0   0.0  0.0\n\n\n\n\n\n","category":"function"},{"location":"functions/cycle-history-markov-chain/#MarkovWeightedEFMs.tree_plot","page":"Functions","title":"MarkovWeightedEFMs.tree_plot","text":"function tree_plot(#\n    T::Matrix{<:Real},\n    I::Int64=1;\n    node_label_textsize::Real=15,\n    edge_label_textsize::Real=12,\n    arrow_shift::Real=0.85,\n    x_pad::Real=0.75,\n    y_pad::Real=0.75,\n    tfactor::Real=0.15,\n    tangents::Tuple{#\n        Tuple{<:Real, <:Real},\n        Tuple{<:Real, <:Real}\n    } = ((1,0),(0,1)),\n    show_all::Bool=false\n\n)\n\nPlot augmented prefix tree from transition probability matrix T rooted on state/node I.\n\nT is a right stochastic transition probability matrix with rows summing to one.\n\nI is a state in 1:size(T,1).\n\nnodelabeltextsize is the text size of the node labels indexed from T.\n\nedgelabeltextsize is the text size of the edge labels taken from T.\n\narrow_shift is the percentage shift of the arrow head from src to dst.\n\nx_pad is the left/right x coordinate padding of the plotting box.\n\ny_pad is the up/down y coordinate padding of the plotting box.\n\ntfactor scales the distance of the bezier control point relative to the distance of the src and dst nodes.\n\ntangents is the tangent of the src vertex and dst vertex.\n\nshow_all = true explicitly plots the upstream transition from all EFMs that pass through the initial state/node I. By default, these arrows stemming from the green nodes are omitted for visual clarity.\n\n\n\n\n\n","category":"function"},{"location":"functions/cycle-history-markov-chain/#Atomic-CHMC-functions","page":"Functions","title":"Atomic CHMC functions","text":"","category":"section"},{"location":"functions/cycle-history-markov-chain/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/cycle-history-markov-chain/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"functions/cycle-history-markov-chain/","page":"Functions","title":"Functions","text":"Pages = [\"cycle-history-mc.md\"]","category":"page"},{"location":"tutorials/efm-estimation/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"This section shows how to use the functions in MarkovWeightedEFMs.jl on the following example network.","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"(Image: Note the network must be closed-loop and consist exclusively of unimolecular reactions)","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"using MarkovWeightedEFMs","category":"page"},{"location":"tutorials/efm-estimation/#Problem-statement","page":"Tutorial","title":"Problem statement","text":"","category":"section"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"Given the metabolic network above, its steady state fluxes, and its elementary flux modes (EFMs), what is the set of EFM weights that reconstructs the observed network fluxes?","category":"page"},{"location":"tutorials/efm-estimation/#Inputs","page":"Tutorial","title":"Inputs","text":"","category":"section"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"For this type of problem, we require the following:","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"Stoichiometry matrix of unimolecular reactions (must be unimolecular, strongly-connected, and closed-loop!)\nSteady state fluxes along each reaction.","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"The network metabolites and reactions are typically encoded in an m by r stoichiometry matrix S. The steady state flux vector is stored as a separate vector.","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"using MarkovWeightedEFMs\n\nS = [#\n -1  0  0  0  0  0  0  0  0  0  1\n  1 -1  1 -1  0  0  0  0  0  0  0\n  0  1 -1  0 -1  1  0  0  0  0  0\n  0  0  0  1  0  0 -1  0  0  0  0\n  0  0  0  0  1 -1  1 -1 -1  1  0\n  0  0  0  0  0  0  0  1  0  0 -1\n  0  0  0  0  0  0  0  0  1 -1  0\n]\nv = [3, 2, 1, 2, 3, 2, 2, 3, 1, 1, 3]\nnothing # hide","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"We can check that the flux vector satisfies the steady state requirements.","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"all(S * v .== 0) # should evaluate as true","category":"page"},{"location":"tutorials/efm-estimation/#Solving-for-EFM-sequences,-probabilities,-and-weights","page":"Tutorial","title":"Solving for EFM sequences, probabilities, and weights","text":"","category":"section"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"The following function applies our cycle-history (discrete-time) Markov chain method to compute the network EFMs, their steady state EFM probabilities, and weights. By default, the last parameter is 1 and can be omitted from the function. This parameter is the (arbitrary) initial state to root the cycle-history Markov chain. The choice of root state does not change the EFM probabilities or weights and is explained further in the section below.","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"efms = steady_state_efm_distribution(S, v, 1)","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"The enumerated EFM sequences are","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"efms.e","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"The corresponding EFM probabilities are","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"efms.p","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"The corresponding EFM weights are","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"efms.w","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"Note: there is possibly an unexplained bug with the discrete-time Markov chain function QuantEcon package used to compute the steady state probabilities of each state. Sometimes, NaNs are returned from steady_state_efm_distribution and running the code again seems to return the proper solution.","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"We can check that the EFM weights reconstruct the observed network fluxes","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"E = reshape_efm_vector(efms.e, S) # matrix of EFM weights\nE * efms.w ≈ v # passes","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"A binary EFM matrix with rows = # reactions and columns = # EFMs can be converted back to the array of EFM sequences by","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"reshape_efm_matrix(E, S)","category":"page"},{"location":"tutorials/efm-estimation/#Visualizing-the-Markov-chain","page":"Tutorial","title":"Visualizing the Markov chain","text":"","category":"section"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"Our algorithm for computing EFM probabilities is to model steady state flux network as a cycle-history Markov chain. This is a discrete-time Markov chain of a certain transformed flux network. For further details, please read the accompanying paper in the Citation section. The network structure looks similar to a prefix tree although there exist certain upstream edges linking children to parent nodes. This network must be rooted on a starting metabolite, although the choice of root does not affect the final EFM probabilities. By default, index 1 is chosen as the root if this parameter is omitted. To visualize the transformed network:","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"using GLMakie # Makie backend\nGLMakie.activate!()\nT = stoich_to_transition(S, v) # transition probability matrix of the network\ntree_plot(T, 1) # the last parameter is the rooted metabolite index","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"If using the GLMakie backend, ensure OpenGL is installed on your machine and accessible by Julia. The GLMakie plot is interactive and allows users to drag nodes and zoom in/out. Otherwise, you could choose another backend such as CairoMakie to generate and save a static plot. A prettier, hand-coded version of the transformed network is shown below.","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"The blue node is the root of the tree and the green nodes indicate that there is an edge back up to the root. By default, these arrows are omitted to avoid cluttering the plot.","category":"page"},{"location":"tutorials/efm-estimation/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"#MarkovWeightedEFMs.jl","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"","category":"section"},{"location":"","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"MarkovWeightedEFMs.jl is a package for computing EFM probabilities from closed-loop, unimolecular metabolic networks.","category":"page"},{"location":"#Installation","page":"MarkovWeightedEFMs.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"To install this package, open a julia session and enter:","category":"page"},{"location":"","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"julia> ]\n(@v1.6) pkg> add https://github.com/jchitpin/MarkovWeightedEFMs.jl.git","category":"page"},{"location":"#Usage","page":"MarkovWeightedEFMs.jl","title":"Usage","text":"","category":"section"},{"location":"","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"Once installed, the package is loaded in a julia session by typing:","category":"page"},{"location":"","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"julia> using MarkovWeightedEFMs","category":"page"},{"location":"","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"Note: the one plotting function in this package relies on the GLMakie backend. Errors with tree_plot() are probably related to OpenGL. See https://github.com/JuliaPlots/GLMakie.jl#troubleshooting-opengl for troubleshooting tips.","category":"page"},{"location":"#Citing-MarkovWeightedEFMs.jl","page":"MarkovWeightedEFMs.jl","title":"Citing MarkovWeightedEFMs.jl","text":"","category":"section"},{"location":"","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"","category":"page"},{"location":"","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"Justin G Chitpin and Theodore J Perkins,  A Markov constraint to uniquely identify elementary flux mode weights in unimolecular metabolic networks, biorXiv preprint biorXiv:2022.07.25.501464, doi: https://doi.org/10.1101/2022.07.25.501464, 2022. –-","category":"page"}]
}
