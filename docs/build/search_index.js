var documenterSearchIndex = {"docs":
[{"location":"tutorials/chmc-standard-ion-channels.html#CHMC-(ion-channels)","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"","category":"section"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"This section demonstrates how to use the functions in MarkovWeightedEFMs.jl to analyze the steady state dynamics of the following ion channel with three possible binding sites reproduced from Bicknell and Goodhill (https://doi.org/10.1073/pnas.1604090113).","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"(Image: Markov chain model of IP3 receptor from Bicknell and Goodhill (https://doi.org/10.1073/pnas.1604090113))","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"using MarkovWeightedEFMs","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html#Markov-state-model-of-IP3-channel-activity","page":"CHMC (ion channels)","title":"Markov state model of IP3 channel activity","text":"","category":"section"},{"location":"tutorials/chmc-standard-ion-channels.html#Rate-constants","page":"CHMC (ion channels)","title":"Rate constants","text":"","category":"section"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"using MarkovWeightedEFMs # my package\n\n# Parameters\nc = 0.1 # Ca2+ (uM)\nI = 0.1 # IP3 (uM)\na1 = 50\na2 = 0.035\na4 = 3.5\na5 = 65\na6 = 25\na7 = 10\na8 = 0.035\na9 = 0.15\na10 = 1.25\na11 = 110\nb1 = 2.5\nb2 = 1.25\nb3 = 0.25\nb4 = 12.5\nb5 = 10\nb7 = 0.25\nb9 = 0.2\nb10 = 2.5\nb11 = 20\nK1 = b1 / a1\nK2 = b2 / a2\nK4 = b4 / a4\nK5 = b5 / a5\nK7 = b7 / a7\nK9 = b9 / a9\nK10 = b10 / a10\na3 = (b3 * K4) / (K1 * K2)\nb6 = (a6 * K5 * K7) / K1\nb8 = (a8 * K2 * K10) / K9\nnothing # hide","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html#Generator-and-transition-matrix","page":"CHMC (ion channels)","title":"Generator and transition matrix","text":"","category":"section"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"# Markov transition rate matrix\nQ = [\n  0  c*a6 0    I*a7 0    0    0  0    0    0\n  b6 0    c*a4 0    I*a1 0    0  0    0    0\n  0  b4   0    0    0    I*a3 0  0    0    0\n  b7 0    0    0    c*a5 0    a9 0    0    0\n  0  b1   0    b5   0    c*a2 0  a9   0    a11\n  0  0    b3   0    b2   0    0  0    a10  0\n  0  0    0    b9   0    0    0  c*a5 0    0\n  0  0    0    0    b9   0    b5 0    c*a8 0\n  0  0    0    0    0    b10  0  b8   0    0\n  0  0    0    0    b11  0    0  0    0    0\n];\n\n# Markov transition probability matrix\nT = Q ./ sum(Q, dims=2)","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html#Enumerating-the-EFMs/simple-cycles-and-compute-their-probabilities","page":"CHMC (ion channels)","title":"Enumerating the EFMs/simple cycles and compute their probabilities","text":"","category":"section"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"The Markov state model contains 39 EFMs. If one were to simulate trajectories from this model for an infinite period of time and decompose these trajectories into simple cycles, the resulting frequencies would converge on the following EFM probabilities. For example, the active-inactive-active transition involving states 10-5-10 occurs ~83.8% of the time on average in this model.","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"res = steady_state_efm_distribution(T);\n\n# EFMs/simple cycles and their corresponding probabilities\nreduce(hcat, [res.e, res.p])","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html#Visualizing-the-CHMC","page":"CHMC (ion channels)","title":"Visualizing the CHMC","text":"","category":"section"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"The blue node represents state 1 and is the root of the tree. All green nodes return back to the blue node but these arrows are hidden to limit visual clutter.","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"using GLMakie\nGLMakie.activate!()\nplot_chmc(T, 1) # arbitrarily rooted on state 1","category":"page"},{"location":"tutorials/chmc-standard-ion-channels.html","page":"CHMC (ion channels)","title":"CHMC (ion channels)","text":"(Image: )","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html#CHMC-(metabolic-networks)","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"","category":"section"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"This section demonstrates how to use the functions in MarkovWeightedEFMs.jl to analyze the following unimolecular reaction network.","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"(Image: Example unimolecular reaction network)","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"using MarkovWeightedEFMs","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html#Problem-statement","page":"CHMC (metabolic networks)","title":"Problem statement","text":"","category":"section"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"Given the metabolic network above, its steady state fluxes, and its elementary flux modes (EFMs), what is the set of EFM weights that reconstructs the observed network fluxes?","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html#Inputs","page":"CHMC (metabolic networks)","title":"Inputs","text":"","category":"section"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"For this type of problem, we require the following:","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"Stoichiometry matrix of unimolecular reactions (must be unimolecular and strongly-connected; either open or closed loop)\nSteady state fluxes along each reaction.","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"The network metabolites and reactions are typically encoded in an m by r stoichiometry matrix S. The steady state flux vector is stored as a separate vector.","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"using MarkovWeightedEFMs # load package\n\n# Stoichiometry matrix and flux vector for the example network\nS = [#\n -1  0  0  0  0  0  0  0  0  0  1\n  1 -1  1 -1  0  0  0  0  0  0  0\n  0  1 -1  0 -1  1  0  0  0  0  0\n  0  0  0  1  0  0 -1  0  0  0  0\n  0  0  0  0  1 -1  1 -1 -1  1  0\n  0  0  0  0  0  0  0  1  0  0 -1\n  0  0  0  0  0  0  0  0  1 -1  0\n]\nv = [3, 2, 1, 2, 3, 2, 2, 3, 1, 1, 3]\nnothing # hide","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"We can check that the flux vector satisfies the steady state requirements.","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"all(S * v .== 0) # should evaluate as true","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html#Solving-for-EFM-sequences,-probabilities,-and-weights","page":"CHMC (metabolic networks)","title":"Solving for EFM sequences, probabilities, and weights","text":"","category":"section"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"The following function applies our (discrete-time) cycle-history Markov chain (CHMC) method to compute the network EFMs, their steady state EFM probabilities, and weights. By default, the last parameter is 1 and can be omitted from the function. This parameter is the (arbitrary) initial state to root the CHMC. The choice of root state does not change the EFM probabilities or weights and is explained further in the section below.","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"res = steady_state_efm_distribution(S, v, 1)","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"The enumerated EFM sequences are","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"res.e","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"The corresponding EFM probabilities are","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"res.p","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"The corresponding EFM weights are","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"res.w","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"We can check that the EFM weights reconstruct the observed network fluxes","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"E = reshape_efm_vector(res.e, S) # matrix of EFM weights\nE * res.w ≈ v # passes","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"A binary EFM matrix with rows = # reactions and columns = # EFMs can be converted back to the array of EFM sequences by","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"reshape_efm_matrix(E, S)","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html#Visualizing-the-CHMC","page":"CHMC (metabolic networks)","title":"Visualizing the CHMC","text":"","category":"section"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"The following plotting function visualizes the CHMC rooted on a metabolite state (1 by default).","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"using GLMakie # Makie backend\nGLMakie.activate!()\nT = stoichiometry_to_transition_matrix(S, v)\nplot_chmc(T, 1) # the last parameter is the rooted metabolite index","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"(Image: )","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"If using the GLMakie backend, ensure OpenGL is installed on your machine and accessible by Julia. The GLMakie plot is interactive and allows users to drag nodes and zoom in/out. Otherwise, you could choose another backend such as CairoMakie to generate and save a static plot. A prettier, hand-coded version of the transformed network is shown below.","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"The blue node is the root of the tree and the green nodes indicate that there is an edge back up to the root. By default, these arrows are omitted to avoid cluttering the plot.","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"(Image: )","category":"page"},{"location":"tutorials/chmc-standard-metabolic-networks.html#Exporting/importing-the-CHMC-results","page":"CHMC (metabolic networks)","title":"Exporting/importing the CHMC results","text":"","category":"section"},{"location":"tutorials/chmc-standard-metabolic-networks.html","page":"CHMC (metabolic networks)","title":"CHMC (metabolic networks)","text":"fname = \"chmc-results.txt\"\nexport_chmc(fname, res) # save results to text\nres2 = import_chmc(fname) # load results\nres == res2 # should evaluate as true","category":"page"},{"location":"library/chmc-standard.html#CHMC","page":"CHMC","title":"CHMC","text":"","category":"section"},{"location":"library/chmc-standard.html#Public-functions","page":"CHMC","title":"Public functions","text":"","category":"section"},{"location":"library/chmc-standard.html","page":"CHMC","title":"CHMC","text":"MarkovWeightedEFMs.CHMC.Standard.steady_state_efm_distribution(S::Matrix{<:Integer}, v::Vector{<:Real}, I::Int64=1)\nMarkovWeightedEFMs.CHMC.Standard.steady_state_efm_distribution(T::Matrix{<:Real}, I::Int64=1)\nstoichiometry_to_transition_matrix\nreshape_efm_matrix\nreshape_efm_vector\nexport_chmc(fname::String, res::CHMCStandardSummary)\nMarkovWeightedEFMs.CHMC.import_chmc","category":"page"},{"location":"library/chmc-standard.html#MarkovWeightedEFMs.CHMC.Standard.steady_state_efm_distribution","page":"CHMC","title":"MarkovWeightedEFMs.CHMC.Standard.steady_state_efm_distribution","text":"steady_state_efm_distribution(#\n    S::Matrix{<:Integer},\n    v::Vector{<:Real},\n    I::Int64=1;\n    solver::Symbol=:Direct,\n    issparse::Bool=false\n)\n\nEnumerate the EFMs from stoichiometry matrix S and compute the steady state probabilities of each EFM according to the discrete-time, cycle-history Markov chain.\n\nS is a fully-connected, unimolecular, m by n stoichiometry matrix with m metabolites and n reactions.\n\nv is the n-length steady state flux vector associated with S.\n\nI is the initial starting state for rooting the cycle-history Markov chain. The choice of initial starting state does not affect the steady state EFM probabilities. The default is 1 and must be a whole number between 1:m.\n\nsolver is the type used for eigenvector calculations. Default is :Direct but may use iterative methods :IterativeSolver_gmres or :Arnoldi\n\nissparse is true will use a sparse transition probability for the CHMC to save memory.\n\nExample\n\njulia> S = [#\n -1  0  0  0  0  0  0  0  0  0  1\n  1 -1  1 -1  0  0  0  0  0  0  0\n  0  1 -1  0 -1  1  0  0  0  0  0\n  0  0  0  1  0  0 -1  0  0  0  0\n  0  0  0  0  1 -1  1 -1  1 -1  0\n  0  0  0  0  0  0  0  0  0  1 -1\n  0  0  0  0  0  0  0  1 -1  0  0\n];\njulia> v = [3, 2, 1, 2, 3, 2, 2, 1, 1, 3, 3];\njulia> res = steady_state_efm_distribution(S, v);\njulia> res.e # EFM state sequences\n6-element Vector{Vector{Int64}}:\n [3, 2, 3]\n [3, 2, 4, 5, 3]\n [3, 5, 3]\n [6, 1, 2, 4, 5, 6]\n [7, 5, 7]\n [6, 1, 2, 3, 5, 6]\n\njulia> res.p # EFM probabilities\n6-element Vector{Float64}:\n 0.10638297872340426\n 0.0425531914893617\n 0.25531914893617025\n 0.1914893617021277\n 0.14893617021276595\n 0.25531914893617025\n\njulia> res.w # EFM weights\n6-element Vector{Float64}:\n 0.7142857142857142\n 0.2857142857142857\n 1.7142857142857144\n 1.2857142857142858\n 0.9999999999999999\n 1.7142857142857144\n\n\n\n\n\n","category":"function"},{"location":"library/chmc-standard.html#MarkovWeightedEFMs.CHMC.Standard.steady_state_efm_distribution-2","page":"CHMC","title":"MarkovWeightedEFMs.CHMC.Standard.steady_state_efm_distribution","text":"steady_state_efm_distribution(#\n    T::Matrix{<:Real},\n    I::Int64=1;\n    solver::Symbol=:Direct\n)\n\nEnumerate the EFMs from (right) transition probability matrix T whose rows sum to one, and compute the steady state probabilities of each EFM according to the discrete-time, cycle-history Markov chain.\n\nT is the discrete-time transition probability matrix with probabilities proportional to the outgoing fluxes.\n\nI is the initial starting state for rooting the cycle-history Markov chain. The choice of initial starting state does not affect the steady state EFM probabilities. The default is 1 and must be a whole number between 1:m.\n\nsolver is the type used for eigenvector calculations. Default is :Direct but may use iterative methods :IterativeSolver_gmres or :Arnoldi.\n\nExample\n\njulia> T = [#\n  0.0  1.0   0.0       0.0  0.0   0.0  0.0\n  0.0  0.0   0.5       0.5  0.0   0.0  0.0\n  0.0  0.25  0.0       0.0  0.75  0.0  0.0\n  0.0  0.0   0.0       0.0  1.0   0.0  0.0\n  0.0  0.0   0.333333  0.0  0.0   0.5  0.166667\n  1.0  0.0   0.0       0.0  0.0   0.0  0.0\n  0.0  0.0   0.0       0.0  1.0   0.0  0.0\n];\njulia> res = steady_state_efm_distribution(T);\njulia> res.e # EFM state sequences\n6-element Vector{Vector{Int64}}:\n [3, 2, 3]\n [3, 2, 4, 5, 3]\n [3, 5, 3]\n [6, 1, 2, 3, 5, 6]\n [7, 5, 7]\n [6, 1, 2, 4, 5, 6]\n\njulia> res.p # EFM probabilities\n6-element Vector{Float64}:\n 0.13723110896294213\n 0.035797649943428565\n 0.26989203316869914\n 0.20302350628312624\n 0.13926980198123254\n 0.2147858996605714\n\n\n\n\n\n","category":"function"},{"location":"library/chmc-standard.html#MarkovWeightedEFMs.CHMC.Standard.stoichiometry_to_transition_matrix","page":"CHMC","title":"MarkovWeightedEFMs.CHMC.Standard.stoichiometry_to_transition_matrix","text":"stoichiometry_to_transition_matrix(S::Matrix{<:Real}, v::Vector{<:Real})\n\nConvert stoichiometry matrix S with vector of steady state fluxes to a right stochastic transition probability matrix with rows summing to one.\n\nS is the m by n stoichiometry matrix with m metabolites and n reactions.\n\nv is the steady state flux vector with length n.\n\nExamples\n\njulia> S = [#\n  -1  0  0  0  0  0  0  0  0  0  1\n   1 -1  1 -1  0  0  0  0  0  0  0\n   0  1 -1  0 -1  1  0  0  0  0  0\n   0  0  0  1  0  0 -1  0  0  0  0\n   0  0  0  0  1 -1  1 -1 -1  1  0\n   0  0  0  0  0  0  0  1  0  0 -1\n   0  0  0  0  0  0  0  0  1 -1  0\n]\njulia> v = [2, 2, 2, 2, 2, 2, 2, 2, 4]\njulia> stoich_to_transition(S, v)\n7x7 Matrix{Float64}:\n 0.0  1.0   0.0       0.0  0.0   0.0  0.0\n 0.0  0.0   0.5       0.5  0.0   0.0  0.0\n 0.0  0.25  0.0       0.0  0.75  0.0  0.0\n 0.0  0.0   0.0       0.0  1.0   0.0  0.0\n 0.0  0.0   0.333333  0.0  0.0   0.5 0.166667\n 1.0  0.0   0.0       0.0  0.0   0.0  0.0\n 0.0  0.0   0.0       0.0  1.0   0.0  0.0\n\n\n\n\n\n","category":"function"},{"location":"library/chmc-standard.html#MarkovWeightedEFMs.CHMC.Standard.reshape_efm_matrix","page":"CHMC","title":"MarkovWeightedEFMs.CHMC.Standard.reshape_efm_matrix","text":"reshape_efm_matrix(ϕ::Matrix{Int64}, S::Matrix{<:Real})\n\nConvert a matrix of EFMs ϕ to a nested vector of EFMs from a stoichiometry matrix S. Stoichiometry matrix may only contain unimolecular reactions.\n\nϕ is the n by k EFM matrix with n reactions (rows) and k EFMs (cols).\n\nS is the m by n stoichiometry matrix with m metabolites (rows) and n reactions (cols).\n\nExamples\n\njulia> ϕ = [#\n  1  1  0  0  0  0\n  1  0  1  0  0  0\n  0  0  1  0  0  1\n  0  1  0  0  0  1\n  1  0  0  1  0  0\n  0  0  0  1  0  1\n  0  1  0  0  0  1\n  1  1  0  0  0  0\n  0  0  0  0  1  0\n  0  0  0  0  1  0\n  1  1  0  0  0  0\n]\njulia> S = [#\n  -1  0  0  0  0  0  0  0  0  0  1\n   1 -1  1 -1  0  0  0  0  0  0  0\n   0  1 -1  0 -1  1  0  0  0  0  0\n   0  0  0  1  0  0 -1  0  0  0  0\n   0  0  0  0  1 -1  1 -1 -1  1  0\n   0  0  0  0  0  0  0  1  0  0 -1\n   0  0  0  0  0  0  0  0  1 -1  0\n]\njulia> efm_vector = reshape_efm_matrix(ϕ, S)\n6-element Vector{Vector{Int64}}:\n [1, 2, 3, 5, 6, 1]\n [1, 2, 4, 5, 6, 1]\n [2, 3, 2]\n [3, 5, 3]\n [5, 7, 5]\n [3, 2, 4, 5, 3]\n\n\n\n\n\n","category":"function"},{"location":"library/chmc-standard.html#MarkovWeightedEFMs.CHMC.Standard.reshape_efm_vector","page":"CHMC","title":"MarkovWeightedEFMs.CHMC.Standard.reshape_efm_vector","text":"reshape_efm_vector(ϕ::Vector{Vector{Int64}}, S::Matrix{<:Real})\n\nConvert nested vector of EFM indices ϕ with length k to an n by k matrix of EFMs based on m by n stoichiometry matrix S. Stoichiometry matrix may only contain unimolecular reactions.\n\nϕ is the nested vector of EFMs with length k and elements corresponding to EFM metabolite indices in S.\n\nS is the m by n stoichiometry matrix with m metabolites (rows) and n reactions (cols).\n\nExamples\n\njulia> ϕ = [#\n  [1, 2, 3, 5, 6, 1],\n  [1, 2, 4, 5, 6, 1],\n  [2, 3, 2], [3, 5, 3], [5, 7, 5], [2, 4, 5, 3, 2]\n]\njulia> S = [#\n  -1  0  0  0  0  0  0  0  0  0  1\n   1 -1  1 -1  0  0  0  0  0  0  0\n   0  1 -1  0 -1  1  0  0  0  0  0\n   0  0  0  1  0  0 -1  0  0  0  0\n   0  0  0  0  1 -1  1 -1 -1  1  0\n   0  0  0  0  0  0  0  1  0  0 -1\n   0  0  0  0  0  0  0  0  1 -1  0\n]\njulia> efm_matrix = reshape_efm_vector(ϕ, S)\n11x6 Matrix{Int64}:\n 1  1  0  0  0  0\n 1  0  1  0  0  0\n 0  0  1  0  0  1\n 0  1  0  0  0  1\n 1  0  0  1  0  0\n 0  0  0  1  0  1\n 0  1  0  0  0  1\n 1  1  0  0  0  0\n 0  0  0  0  1  0\n 0  0  0  0  1  0\n 1  1  0  0  0  0\n\n\n\n\n\n","category":"function"},{"location":"library/chmc-standard.html#MarkovWeightedEFMs.CHMC.Standard.export_chmc-Tuple{String, CHMCStandardSummary}","page":"CHMC","title":"MarkovWeightedEFMs.CHMC.Standard.export_chmc","text":"export_chmc(fname::String, res::CHMCStandardSummary)\n\nExport CHMC results to text file fname.\n\nfname is the filename to write the CHMC results.\n\nres are the results from steady_state_efm_distribution. ```\n\n\n\n\n\n","category":"method"},{"location":"library/chmc-standard.html#MarkovWeightedEFMs.CHMC.import_chmc","page":"CHMC","title":"MarkovWeightedEFMs.CHMC.import_chmc","text":"import_chmc(fname::String)\n\nImport standard/atomic CHMC results from text file fname.\n\nfname is the filename containing the CHMC results.\n\n\n\n\n\n","category":"function"},{"location":"library/chmc-standard.html#Index","page":"CHMC","title":"Index","text":"","category":"section"},{"location":"library/chmc-standard.html","page":"CHMC","title":"CHMC","text":"Pages = [\"chmc-standard.md\"]","category":"page"},{"location":"index.html#MarkovWeightedEFMs.jl","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"","category":"section"},{"location":"index.html","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"MarkovWeightedEFMs.jl is a package for computing EFM probabilities and weights for steady state metabolic flux networks.","category":"page"},{"location":"index.html#Installation","page":"MarkovWeightedEFMs.jl","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"To install this package, open a julia session and enter:","category":"page"},{"location":"index.html","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"julia> ]\n(@v1.6) pkg> add https://github.com/jchitpin/MarkovWeightedEFMs.jl.git","category":"page"},{"location":"index.html#Usage","page":"MarkovWeightedEFMs.jl","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"Once installed, the package is loaded in a julia session by typing:","category":"page"},{"location":"index.html","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"julia> using MarkovWeightedEFMs","category":"page"},{"location":"index.html","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"Note: the one plotting function in this package relies on the GLMakie backend. Errors with tree_plot() are probably related to OpenGL. See https://github.com/JuliaPlots/GLMakie.jl#troubleshooting-opengl for troubleshooting tips.","category":"page"},{"location":"index.html#Citing-MarkovWeightedEFMs.jl","page":"MarkovWeightedEFMs.jl","title":"Citing MarkovWeightedEFMs.jl","text":"","category":"section"},{"location":"index.html","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"Justin G Chitpin and Theodore J Perkins, A Markov constraint to uniquely identify elementary flux mode weights in unimolecular metabolic networks, biorXiv preprint biorXiv:2022.07.25.501464, doi: https://doi.org/10.1101/2022.07.25.501464, 2022.","category":"page"},{"location":"index.html#License","page":"MarkovWeightedEFMs.jl","title":"License","text":"","category":"section"},{"location":"index.html","page":"MarkovWeightedEFMs.jl","title":"MarkovWeightedEFMs.jl","text":"This software is released under the MIT license.","category":"page"},{"location":"library/chmc-plots.html#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"library/chmc-plots.html#CHMC","page":"Plotting","title":"CHMC","text":"","category":"section"},{"location":"library/chmc-plots.html","page":"Plotting","title":"Plotting","text":"plot_chmc","category":"page"},{"location":"library/chmc-plots.html#MarkovWeightedEFMs.Plots.plot_chmc","page":"Plotting","title":"MarkovWeightedEFMs.Plots.plot_chmc","text":"function plot_chmc(#\n    T::Matrix{<:Real},\n    I::Int64=1;\n    node_label_textsize::Real=15,\n    edge_label_textsize::Real=12,\n    arrow_shift::Real=0.85,\n    x_pad::Real=0.75,\n    y_pad::Real=0.75,\n    tfactor::Real=0.15,\n    tangents::Tuple{#\n        Tuple{<:Real, <:Real},\n        Tuple{<:Real, <:Real}\n    } = ((1,0),(0,1)),\n    show_all::Bool=false\n\n)\n\nPlot cycle-history Markov chain from transition probability matrix T rooted on state/node I.\n\nT is a right stochastic transition probability matrix with rows summing to one.\n\nI is a state in 1:size(T,1).\n\nnode_label_textsize is the text size of the node labels indexed from T.\n\nedge_label_textsize is the text size of the edge labels taken from T.\n\narrow_shift is the percentage shift of the arrow head from src to dst.\n\nx_pad is the left/right x coordinate padding of the plotting box.\n\ny_pad is the up/down y coordinate padding of the plotting box.\n\ntfactor scales the distance of the bezier control point relative to the distance of the src and dst nodes.\n\ntangents is the tangent of the src vertex and dst vertex.\n\nshow_all=true explicitly plots the upstream transition from all EFMs that pass through the initial state/node I. By default, these arrows stemming from the green nodes are omitted for visual clarity.\n\n\n\n\n\n","category":"function"},{"location":"library/chmc-plots.html#Index","page":"Plotting","title":"Index","text":"","category":"section"},{"location":"library/chmc-plots.html","page":"Plotting","title":"Plotting","text":"Pages = [\"chmc-plots.md\"]","category":"page"}]
}
